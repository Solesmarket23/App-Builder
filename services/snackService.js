/**
 * Snack Service - Creates Expo Snack previews for generated code
 * Uses Expo's Snack API to compile and host live previews
 */

const SNACK_API_URL = 'https://exp.host/--/api/v2/snack/save';

/**
 * Creates a Snack and returns the preview URL
 * @param {string} code - Generated React Native code
 * @param {string} name - Name for the Snack
 * @returns {Promise<{url: string, id: string}>} - Snack URL and ID
 */
export async function createSnack(code, name = 'AI Generated App') {
  try {
    // Prepare the Snack payload
    const snackData = {
      name: name,
      description: 'Generated by AppBuilder AI',
      files: {
        'App.js': {
          type: 'CODE',
          contents: code,
        },
        'app.json': {
          type: 'CODE',
          contents: JSON.stringify({
            expo: {
              name: name,
              slug: name.toLowerCase().replace(/\s+/g, '-'),
              version: '1.0.0',
              platforms: ['ios', 'android'],
            },
          }),
        },
      },
      dependencies: {
        'expo': '~54.0.0',
        'react': '19.1.0',
        'react-native': '0.81.4',
        'expo-linear-gradient': '~15.0.7',
        'expo-status-bar': '~3.0.8',
        '@expo/vector-icons': '^14.0.0',
        'react-native-safe-area-context': '~5.6.1',
      },
      sdkVersion: '54.0.0',
    };

    // Create the Snack
    const response = await fetch(SNACK_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(snackData),
    });

    if (!response.ok) {
      throw new Error(`Snack API error: ${response.status}`);
    }

    const result = await response.json();
    
    // Snack URL format: https://snack.expo.dev/[id]
    const snackUrl = `https://snack.expo.dev/${result.id}`;
    
    return {
      url: snackUrl,
      id: result.id,
      embedUrl: `https://snack.expo.dev/embedded/${result.id}`,
    };
  } catch (error) {
    console.error('Error creating Snack:', error);
    throw error;
  }
}

/**
 * Gets the embed URL for a Snack (optimized for WebView)
 * @param {string} snackId - Snack ID
 * @param {Object} options - Embed options
 * @returns {string} - Embed URL
 */
export function getEmbedUrl(snackId, options = {}) {
  const {
    platform = 'ios',
    preview = true,
    theme = 'dark',
  } = options;

  const params = new URLSearchParams({
    platform,
    preview: preview ? 'true' : 'false',
    theme,
  });

  return `https://snack.expo.dev/embedded/${snackId}?${params.toString()}`;
}

