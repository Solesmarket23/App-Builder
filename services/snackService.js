/**
 * Snack Service - Creates Expo Snack previews for generated code
 * Uses Expo's Snack API to compile and host live previews
 */

const SNACK_API_URL = 'https://snack.expo.dev/--/api/v2/snacks';

/**
 * Creates a Snack and returns the preview URL
 * @param {string} code - Generated React Native code
 * @param {string} name - Name for the Snack
 * @returns {Promise<{url: string, id: string}>} - Snack URL and ID
 */
export async function createSnack(code, name = 'AI Generated App') {
  try {
    // Prepare the Snack payload with updated format
    const snackData = {
      manifest: {
        name: name,
        description: 'Generated by AppBuilder AI',
        sdkVersion: '52.0.0', // Using stable SDK version
      },
      code: {
        'App.js': {
          type: 'CODE',
          contents: code,
        },
      },
      dependencies: {
        'expo': '~52.0.0',
        'react': '18.3.1',
        'react-native': '0.76.5',
        'expo-linear-gradient': '~14.0.1',
        'expo-status-bar': '~2.0.0',
        '@expo/vector-icons': '~14.0.4',
        'react-native-safe-area-context': '~4.12.0',
      },
    };

    // Create the Snack
    const response = await fetch(SNACK_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Snack-Api-Version': '3.0.0',
      },
      body: JSON.stringify(snackData),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Snack API error response:', errorText);
      throw new Error(`Snack API error: ${response.status}`);
    }

    const result = await response.json();
    
    // Snack URL format: https://snack.expo.dev/[id]
    const snackUrl = `https://snack.expo.dev/${result.id}`;
    
    return {
      url: snackUrl,
      id: result.id,
      embedUrl: `https://snack.expo.dev/embedded/@snack/${result.id}`,
    };
  } catch (error) {
    console.error('Error creating Snack:', error);
    throw error;
  }
}

/**
 * Gets the embed URL for a Snack (optimized for WebView)
 * @param {string} snackId - Snack ID
 * @param {Object} options - Embed options
 * @returns {string} - Embed URL
 */
export function getEmbedUrl(snackId, options = {}) {
  const {
    platform = 'ios',
    preview = true,
    theme = 'dark',
  } = options;

  const params = new URLSearchParams({
    platform,
    preview: preview ? 'true' : 'false',
    theme,
  });

  return `https://snack.expo.dev/embedded/${snackId}?${params.toString()}`;
}

