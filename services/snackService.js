/**
 * Snack Service - Creates Expo Snack previews for generated code
 * Uses Expo's Snack API to create live previews
 */

const SNACK_API_URL = 'https://exp.host/--/api/v2/snack/save';

/**
 * Creates a Snack and returns the preview URL
 * @param {string} code - Generated React Native code
 * @param {string} name - Name for the Snack
 * @returns {Promise<{url: string, embedUrl: string, id: string}>} - Snack URLs
 */
export async function createSnack(code, name = 'AI Generated App') {
  try {
    const response = await fetch(SNACK_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        manifest: {
          sdkVersion: '51.0.0',
          name: name,
          description: 'Generated by AppBuilder AI',
        },
        code: {
          'App.js': {
            type: 'CODE',
            contents: code,
          },
        },
        dependencies: {
          'expo-linear-gradient': '*',
          '@expo/vector-icons': '*',
          'react-native-safe-area-context': '*',
        },
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Snack API error:', errorText);
      throw new Error(`Snack API error: ${response.status}`);
    }

    const data = await response.json();
    console.log('Snack API response:', data); // Debug log
    
    // The response returns { id: "xxx" } and URL should be snack.expo.dev/{id}
    const snackId = data.id || data.hash_id;
    
    return {
      url: `https://snack.expo.dev/${snackId}`,
      embedUrl: `https://snack.expo.dev/embedded/${snackId}?preview=true&platform=ios`,
      id: snackId,
    };
  } catch (error) {
    console.error('Error creating Snack:', error);
    throw error;
  }
}

/**
 * Gets the embed URL for a Snack (optimized for WebView)
 * @param {string} snackId - Snack ID
 * @param {Object} options - Embed options
 * @returns {string} - Embed URL
 */
export function getEmbedUrl(snackId, options = {}) {
  const {
    platform = 'ios',
    preview = true,
    theme = 'dark',
  } = options;

  const params = new URLSearchParams({
    platform,
    preview: preview ? 'true' : 'false',
    theme,
  });

  return `https://snack.expo.dev/embedded/@${snackId}?${params.toString()}`;
}
